@page "/genres"
@using DBL
@using Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ProtectedSessionStorage MySession


<div class="tuneapp-page">
    <h1 class="page-title">My Music Genres</h1>

    <div class="genres-container">
        <div class="genre-column">
            <div class="column-header">Available Genres</div>
            <ul class="genre-list">
                @foreach (var item in lst_genres)
                {
                    <li class="genre-item">
                        <div class="genre-name">@item.GenreName</div>
                        <button class="btn-add" @onclick="()=>addGenre(item.Genre)">+</button>
                    </li>
                }
               
            </ul>
        </div>

        <div class="genre-column">
            <div class="column-header">My Favorites</div>
            <ul class="genre-list">
                @foreach(var item in lst_genres_selected)
                {
                    <li class="genre-item">
                        <div class="genre-name">@item.GenreName</div>
                        <button class="btn-remove" @onclick="()=>delGenre(item.Genre)">×</button>
                    </li>
                }
                
            </ul>
        </div>
    </div>

    <div class="save-container">
        <button class="btn-save">Save</button>
    </div>
</div>

<style>
    .tuneapp-page {
        background-color: #0a0a0a;
        color: white;
        min-height: 100vh;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .page-title {
        margin: 20px 0 30px 0;
        text-align: center;
        color: #FF5722; /* TuneApp orange */
        font-size: 28px;
    }

    .genres-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        width: 100%;
        max-width: 600px;
    }

    .genre-column {
        background-color: #0a0a0a;
        border-radius: 5px;
        width: 250px;
    }

    .column-header {
        background-color: #222;
        color: #FF5722; /* TuneApp orange */
        padding: 10px;
        text-align: center;
        border-radius: 5px 5px 0 0;
        font-weight: bold;
    }

    .genre-list {
        list-style: none;
        padding: 0;
        margin: 0;
        background-color: #181818;
        border-radius: 0 0 5px 5px;
    }

    .genre-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 15px;
        border-bottom: 1px solid #333;
    }

        .genre-item:last-child {
            border-bottom: none;
        }

    .btn-add, .btn-remove {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: none;
        color: white;
        font-weight: bold;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .btn-add {
        background-color: #FF5722; /* TuneApp orange */
    }

    .btn-remove {
        background-color: #FF5722; /* TuneApp orange */
    }

    .save-container {
        margin-top: 20px;
    }

    .btn-save {
        background-color: #FF5722; /* TuneApp orange */
        color: white;
        border: none;
        padding: 8px 30px;
        border-radius: 25px; /* Rounded button like the Play Now button */
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-save:hover {
            background-color: #E64A19; /* Darker orange on hover */
        }
</style>


@code 
{
    List<Genres> lst_genres = new List<Genres>();
    List<Genres> lst_genres_selected = new List<Genres>();

    private Listener listener;
    private Artist artist;
    private bool IsArtist = false;

    private async Task addGenre(int id)
    {
        var listener = await MySession.GetAsync<Listener>("ListenerLogin");

        // get the current lists from the server
        GenresDB genresDB = new GenresDB();
        lst_genres_selected = await genresDB.GetGenreByUserId(listener.Value.UserID);

        // check that the item is not already listed
        foreach (var v in lst_genres_selected)
        {
            if (v.Genre == id)
                return;
        }

        UserGenreDB userGenreDB = new UserGenreDB();
        UserGenre userGenre = await userGenreDB.InsertGetObjAsync(listener.Value.UserID, id);

        // update the list again:
        lst_genres_selected = await genresDB.GetGenreByUserId(listener.Value.UserID);

        StateHasChanged();

    }
    private async Task delGenre(int id)
    {
        var listener = await MySession.GetAsync<Listener>("ListenerLogin");

        UserGenreDB userGenreDB = new UserGenreDB();
        UserGenre userGenre = new UserGenre();
        userGenre.GenreID = id;
        userGenre.UserID = listener.Value.UserID;
        await userGenreDB.DeleteAsync(userGenre);

        GenresDB genresDB = new GenresDB();
        lst_genres_selected = await genresDB.GetGenreByUserId(listener.Value.UserID);

        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        var listener = await MySession.GetAsync<Listener>("ListenerLogin");
        GenresDB genresDB = new GenresDB();
        lst_genres = await genresDB.selectAllAsync();
        lst_genres_selected = await genresDB.GetGenreByUserId(listener.Value.UserID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var listener1 = await MySession.GetAsync<Listener>("ListenerLogin");
            var artist1 = await MySession.GetAsync<Artist>("ArtistLogin");
            if (listener1.Success && artist1.Success)
            {
                artist = artist1.Value;
                artist.UserName = listener1.Value.UserName;
                listener = listener1.Value;
                IsArtist = true;
                StateHasChanged();
            }
            else if (listener1.Success)
            {
                listener = listener1.Value;
                StateHasChanged();
            }
            else
                navigationManager.NavigateTo("Login");
        }
    }
}