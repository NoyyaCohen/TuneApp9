@* @page "/forgot-password"
@using Models
@using DBL
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net
@using System.Net.Mail;
@inject IJSRuntime js
@inject NavigationManager navigationManager

<div class="page-container">
    <div class="header-container">
        <div class="back-button" @onclick="NavigateToLogin">
            <i class="fa-solid fa-arrow-left"></i>
        </div>
        <h1 class="page-title">Reset Password</h1>
    </div>

    <div class="form-container">
        @if (currentStep == 1)
        {
            <!-- Step 1: Enter Email -->
            <div class="section-container">
                <h2 class="section-title">
                    <i class="fa-solid fa-envelope"></i>
                    Verify Your Account
                </h2>
                <p class="section-description">
                    Enter your email address and we'll send you a verification code to reset your password.
                </p>

                <div class="form-group">
                    <label for="emailInput">Email Address</label>
                    <input type="email"
                           id="emailInput"
                           class="form-input @(emailError ? "error" : "")"
                           @bind="email"
                           placeholder="Enter your email" />
                    @if (emailError)
                    {
                        <div class="error-message">
                            @emailErrorMessage
                        </div>
                    }
                </div>

                <div class="form-actions">
                    <button class="action-button full-width" @onclick="SendVerificationCode" disabled="@isSending">
                        @if (isSending)
                        {
                            <span>Sending Code...</span>
                        }
                        else
                        {
                            <span>Send Verification Code</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (currentStep == 2)
        {
            <!-- Step 2: Enter Verification Code and New Password -->
            <div class="section-container">
                <h2 class="section-title">
                    <i class="fa-solid fa-shield-halved"></i>
                    Verify and Reset
                </h2>
                <p class="section-description">
                    We've sent a verification code to <strong>@email</strong>. Please enter the code and your new password below.
                </p>

                <div class="form-group">
                    <label for="codeInput">Verification Code</label>
                    <input type="text"
                           id="codeInput"
                           class="form-input @(codeError ? "error" : "")"
                           @bind="verificationCode"
                           placeholder="Enter verification code" />
                    @if (codeError)
                    {
                        <div class="error-message">
                            @codeErrorMessage
                        </div>
                    }
                </div>

                <div class="form-group">
                    <label for="newPasswordInput">New Password</label>
                    <div class="password-wrapper">
                        <input type="@(showPassword ? "text" : "password")"
                               id="newPasswordInput"
                               class="form-input @(passwordError ? "error" : "")"
                               @bind="newPassword"
                               placeholder="Enter new password" />
                        <button class="toggle-password" @onclick="TogglePasswordVisibility">
                            <i class="fa-solid @(showPassword ? "fa-eye" : "fa-eye-slash")"></i>
                        </button>
                    </div>
                    @if (passwordError)
                    {
                        <div class="error-message">
                            @passwordErrorMessage
                        </div>
                    }
                </div>

                <div class="form-group">
                    <label for="confirmPasswordInput">Confirm Password</label>
                    <div class="password-wrapper">
                        <input type="@(showPassword ? "text" : "password")"
                               id="confirmPasswordInput"
                               class="form-input @(confirmPasswordError ? "error" : "")"
                               @bind="confirmPassword"
                               placeholder="Confirm new password" />
                    </div>
                    @if (confirmPasswordError)
                    {
                        <div class="error-message">
                            @confirmPasswordErrorMessage
                        </div>
                    }
                </div>

                <div class="button-group">
                    <button class="action-button secondary" @onclick="ResendCode" disabled="@isResending">
                        @if (isResending)
                        {
                            <span>Resending...</span>
                        }
                        else
                        {
                            <span>Resend Code</span>
                        }
                    </button>
                    <button class="action-button" @onclick="ChangePassword" disabled="@isResetting">
                        @if (isResetting)
                        {
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </div>
            </div>
        }
        else if (currentStep == 3)
        {
            <!-- Step 3: Success -->
            <div class="success-section">
                <div class="success-icon">
                    <i class="fa-solid fa-circle-check"></i>
                </div>
                <h2 class="success-title">Password Reset Successful</h2>
                <p class="success-description">Your password has been successfully reset. You can now log in with your new password.</p>
                <button class="action-button full-width" @onclick="NavigateToLogin">
                    Go to Login
                </button>
            </div>
        }
    </div>
</div>

@code {
    // State variables
    private int currentStep = 1;
    private string email = "";
    private string verificationCode = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private bool showPassword = false;
    private string storedVerificationCode = "";
    private Listener listenerFound = null;

    // Error states
    private bool emailError = false;
    private string emailErrorMessage = "";
    private bool codeError = false;
    private string codeErrorMessage = "";
    private bool passwordError = false;
    private string passwordErrorMessage = "";
    private bool confirmPasswordError = false;
    private string confirmPasswordErrorMessage = "";

    // Loading states
    private bool isSending = false;
    private bool isResending = false;
    private bool isResetting = false;

    // Navigation methods
    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("/login");
    }

    // Password visibility toggle
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    // Send verification code
    private async Task SendVerificationCode()
    {
        ListenerDB listenerDB = new ListenerDB();
        try
        {
            // Reset error state
            emailError = false;
            emailErrorMessage = "";

            // Validate email
            if (string.IsNullOrWhiteSpace(email))
            {
                emailError = true;
                emailErrorMessage = "Please enter your email address";
                return;
            }

            // Set loading state
            isSending = true;

            // Find user by email using the API
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    Listener listenerFound = await listenerDB.GetListenerByEmail(email);
                }

                if (listenerFound == null)
                {
                    emailError = true;
                    emailErrorMessage = "No account found with this email address";
                    return;
                }
            }
            catch (Exception apiEx)
            {
                if (listenerFound == null)
                {
                    emailError = true;
                    emailErrorMessage = "No account found with this email address";
                    return;
                }
            }

            // Generate verification code (6-digit random number)
            Random random = new Random();
            storedVerificationCode = random.Next(100000, 999999).ToString();

            // TODO: In a real implementation, send this code via email
            await SendPasswordResetEmail(listenerFound.EmailAddress, storedVerificationCode);
            // For this demo, we'll just show it in an alert
            // await js.InvokeVoidAsync("alert",
            //     $"For this demo, here's your verification code: {storedVerificationCode}\n\n" +
            //     "In a real implementation, this would be sent to your email.");

            // Move to next step
            currentStep = 2;
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error: {ex.Message}");
            Console.WriteLine($"Error in SendVerificationCode: {ex.Message}");
        }
        finally
        {
            isSending = false;
        }
    }

    // Resend verification code
    private async Task ResendCode()
    {
        ListenerDB listenerDB = new ListenerDB();
        try
        {
            isResending = true;

            // Generate new verification code
            Random random = new Random();
            storedVerificationCode = random.Next(100000, 999999).ToString();

            // Send the email with the new code
            await SendPasswordResetEmail(userFound.Email, storedVerificationCode);
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isResending = false;
        }
    }

    // Reset password
    private async Task ChangePassword()
    {
        ListenerDB listenerDB = new ListenerDB();
        try
        {
            // Reset error states
            codeError = false;
            passwordError = false;
            confirmPasswordError = false;

            // Validate inputs
            bool isValid = true;

            if (string.IsNullOrWhiteSpace(verificationCode))
            {
                codeError = true;
                codeErrorMessage = "Please enter the verification code";
                isValid = false;
            }
            else if (verificationCode != storedVerificationCode)
            {
                codeError = true;
                codeErrorMessage = "Invalid verification code";
                isValid = false;
            }

            if (string.IsNullOrWhiteSpace(newPassword))
            {
                passwordError = true;
                passwordErrorMessage = "Please enter a new password";
                isValid = false;
            }
            else if (newPassword.Length < 6)
            {
                passwordError = true;
                passwordErrorMessage = "Password must be at least 6 characters";
                isValid = false;
            }

            if (string.IsNullOrWhiteSpace(confirmPassword))
            {
                confirmPasswordError = true;
                confirmPasswordErrorMessage = "Please confirm your password";
                isValid = false;
            }
            else if (newPassword != confirmPassword)
            {
                confirmPasswordError = true;
                confirmPasswordErrorMessage = "Passwords do not match";
                isValid = false;
            }

            if (!isValid) return;

            // Set loading state
            isResetting = true;

            // Update user password
            if (userFound != null)
            {
                // Update user's password in the database using the API
                userFound.Password = newPassword;

                using (HttpClient httpClient = new HttpClient())
                {
                    try
                    {
                        // Call the ResetPassword endpoint
                        int response = await listenerDB.ResetPassAsync(listener);

                        if (response != 0 )
                        {
                            // Move to success step
                            currentStep = 3;
                        }
                        else
                        {
                            await js.InvokeVoidAsync("alert", $"Failed to reset password");
                        }
                    }
                    catch (Exception apiEx)
                    {
                        Console.WriteLine($"API error: {apiEx.Message}");
                        await js.InvokeVoidAsync("alert", $"Error communicating with server: {apiEx.Message}");
                    }
                }
            }
            else
            {
                await js.InvokeVoidAsync("alert", "User not found. Please start over.");
                NavigateToLogin();
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            isResetting = false;
        }
    }


    public async Task SendPasswordResetEmail(string email, string code)
    {
        try
        {
            string fromEmail = "calendate.app@gmail.com";

            MailAddress fromAddress = new MailAddress(fromEmail, "Calendate App");
            MailAddress toAddress = new MailAddress(email);

            SmtpClient smtp = new SmtpClient
                {
                    Host = "smtp.gmail.com",
                    Port = 587,
                    EnableSsl = true,
                    DeliveryMethod = SmtpDeliveryMethod.Network,
                    UseDefaultCredentials = false,
                    Credentials = new NetworkCredential(fromEmail, "zjkh rkrc yuxf dqnr")
                };

            MailMessage message = new MailMessage(fromAddress, toAddress);
            message.Subject = "Reset Your Password - Verification Code";
            message.IsBodyHtml = true;
            message.Body = $@"
                    <html>
                    <body style='font-family: Arial, sans-serif; color: #333;'>
                        <div style='max-width: 600px; margin: 0 auto; padding: 20px;'>
                            <h2 style='color: #007bff;'>Reset Your Password</h2>
                            <p>We received a request to reset your password. Use the verification code below:</p>
                            <div style='background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; margin: 20px 0;'>
                                <h3 style='margin: 0; font-size: 24px; letter-spacing: 5px;'>{code}</h3>
                            </div>
                            <p>If you didn't request a password reset, you can ignore this email.</p>
                            <p>Thank you,<br/>The Calendate Team</p>
                        </div>
                    </body>
                    </html>";

            await smtp.SendMailAsync(message);
            Console.WriteLine($"Password reset email sent to {email}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending email: {ex.Message}");
            throw;
        }
    }
}

<style>
    /* Page Container */
    .page-container {
        max-width: 700px;
        margin: 0 auto;
        padding: 1rem;
        background-color: #f0f5ff;
        background-image: linear-gradient(135deg, #f0f5ff 0%, #e6f0ff 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Header */
    .header-container {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .back-button {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        cursor: pointer;
        margin-right: 1rem;
        transition: all 0.2s ease;
        color: #4361ee;
    }

        .back-button:hover {
            transform: translateX(-2px);
            background-color: #f0f5ff;
        }

    .page-title {
        margin: 0;
        font-size: 1.75rem;
        color: #2d3748;
        font-weight: 600;
    }

    /* Form Container */
    .form-container {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 5px 20px rgba(0,0,0,0.05);
    }

    .section-container {
        margin-bottom: 1.5rem;
    }

    .section-title {
        margin-top: 0;
        margin-bottom: 1rem;
        font-size: 1.4rem;
        color: #4361ee;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-description {
        margin-bottom: 1.5rem;
        color: #4a5568;
        line-height: 1.5;
    }

    /* Form Elements */
    .form-group {
        margin-bottom: 1.25rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #4a5568;
            font-size: 0.95rem;
        }

    .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        font-size: 1rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        transition: all 0.2s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #4361ee;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

        .form-input::placeholder {
            color: #a0aec0;
        }

        .form-input.error {
            border-color: #e53e3e;
        }

    .error-message {
        color: #e53e3e;
        font-size: 0.85rem;
        margin-top: 0.5rem;
    }

    /* Password Input */
    .password-wrapper {
        position: relative;
    }

    .toggle-password {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #a0aec0;
        cursor: pointer;
        padding: 0.5rem;
        z-index: 2;
    }

        .toggle-password:hover {
            color: #4361ee;
        }

    /* Form Actions */
    .form-actions {
        margin-top: 1.5rem;
    }

    .action-button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        background: #4361ee;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 3px 10px rgba(67, 97, 238, 0.15);
    }

        .action-button:hover {
            background: #3949ab;
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.25);
        }

        .action-button:disabled {
            background: #a0aec0;
            cursor: not-allowed;
            box-shadow: none;
        }

        .action-button.secondary {
            background: #f8faff;
            color: #4361ee;
            border: 1px solid #bfdbfe;
            box-shadow: none;
        }

            .action-button.secondary:hover {
                background: #e6f0ff;
            }

            .action-button.secondary:disabled {
                background: #f8faff;
                color: #a0aec0;
                border-color: #e2e8f0;
            }

    .full-width {
        width: 100%;
    }

    /* Button Group */
    .button-group {
        display: flex;
        gap: 1rem;
        margin-top: 1.5rem;
    }

        .button-group .action-button {
            flex: 1;
        }

    /* Success Section */
    .success-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 2rem 1rem;
    }

    .success-icon {
        font-size: 4rem;
        color: #38b2ac;
        margin-bottom: 1.5rem;
    }

    .success-title {
        margin: 0 0 1rem 0;
        font-size: 1.5rem;
        color: #2d3748;
    }

    .success-description {
        margin: 0 0 2rem 0;
        color: #4a5568;
        line-height: 1.5;
    }

    /* Media Queries */
    @@media (max-width: 600px) {
        .form-container {
            padding: 1.5rem;
        }

        .button-group {
            flex-direction: column;
        }

        .header-container {
            margin-bottom: 1rem;
        }
    }
</style> *@