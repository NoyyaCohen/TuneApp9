@page "/prime"
 @using DBL
@using Models

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ProtectedSessionStorage MySession

<style>
    /*עיצוב הזמנת הופעות*/
    .section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .section-title {
        display: flex;
        align-items: center;
        font-size: 1.5rem;
        margin: 0;
    }

    .section-icon {
        width: 24px;
        height: 24px;
        margin-right: 0.5rem;
        fill: #ff3a2e;
    }

    .see-all {
        color: #ff3a2e;
        text-decoration: none;
        font-weight: 500;
    }

        .see-all:hover {
            text-decoration: underline;
        }

    /* Artists Shows Section Styles */
    .shows-container {
        display: flex;
        overflow-x: auto;
        gap: 1rem;
        padding: 0.5rem 0;
        scroll-behavior: smooth;
        scrollbar-width: thin;
        scrollbar-color: #ff3a2e #2a2a35;
        position: relative;
    }

        .shows-container::-webkit-scrollbar {
            height: 6px;
        }

        .shows-container::-webkit-scrollbar-track {
            background: #2a2a35;
            border-radius: 10px;
        }

        .shows-container::-webkit-scrollbar-thumb {
            background: #ff3a2e;
            border-radius: 10px;
        }

    .show-card {
        min-width: 250px;
        border-radius: 0.5rem;
        overflow: hidden;
        flex: 0 0 auto;
        transition: transform 0.2s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

        .show-card:hover {
            transform: translateY(-5px);
        }

    .show-image {
        position: relative;
        width: 100%;
        height: 140px;
        overflow: hidden;
    }

        .show-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .show-date-overlay {
        position: absolute;
        top: 0.5rem;
        left: 0.5rem;
        padding: 0.3rem 0.5rem;
        background: #ff3a2e;
        color: white;
        font-weight: bold;
        border-radius: 0.25rem;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        transform: rotate(-3deg);
    }

    .show-info {
        padding: 0.75rem;
        background: rgba(35, 35, 45, 0.9);
    }

    .show-artist-name {
        font-size: 1rem;
        font-weight: bold;
        margin-bottom: 0.25rem;
        color: white;
    }

    .show-place {
        color: #aaa;
        font-size: 0.85rem;
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
    }

    .location-icon {
        width: 14px;
        height: 14px;
        margin-right: 0.3rem;
        fill: #aaa;
    }

    .ticket-button {
        display: block;
        width: 100%;
        padding: 0.4rem;
        background: #ff3a2e;
        color: white;
        border: none;
        border-radius: 0.25rem;
        text-align: center;
        font-weight: bold;
        cursor: pointer;
        font-size: 0.85rem;
        transition: background-color 0.2s;
    }

        .ticket-button:hover {
            background: #ff1f10;
        }

        .ticket-button:focus {
            outline: 2px solid #ffaa33;
        }

    .scroll-indicator {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(35, 35, 45, 0.7);
        border-radius: 50%;
        cursor: pointer;
        z-index: 1;
    }

    .scroll-left {
        left: 10px;
    }

    .scroll-right {
        right: 10px;
    }
</style>

<link href="/Prime.css" rel="stylesheet" />

<script type="text/javascript">
    var isFirstInit = true;

    function firstInit() {
        const audio = document.getElementById("audio-player");
        const playPauseButton = document.querySelector('.play-pause');
        const playPauseIcon = playPauseButton.querySelector('path');
        const progressBar = document.querySelector('.progress-bar');
        const progressFill = document.querySelector('.progress-fill');
        const progressHandle = document.querySelector('.progress-handle');
        const currentTimeDisplay = document.querySelectorAll('.time')[0];
        const durationDisplay = document.querySelectorAll('.time')[1];
        const volumeFill = document.querySelector('.volume-fill');
        const volumeBar = document.querySelector('.volume-bar');

        // const audio = document.getElementById('audio-player');
        // Play / Pause toggle
        playPauseButton.addEventListener('click', () => {
            if (audio.paused) {
                playSong();
            } else {
                audio.pause();
                playPauseIcon.setAttribute('d', 'M8 5v14l11-7z'); // Play icon
            }
        });

        // Update progress bar as audio plays
        audio.addEventListener('timeupdate', () => {
            const percent = (audio.currentTime / audio.duration) * 100;
            progressFill.style.width = percent + '%';
            progressHandle.style.left = percent + '%';
            currentTimeDisplay.textContent = formatTime(audio.currentTime);
        });

        // Show duration when loaded
        audio.addEventListener('loadedmetadata', () => {
            durationDisplay.textContent = formatTime(audio.duration);
        });

        // Click to seek
        progressBar.addEventListener('click', (e) => {
            const rect = progressBar.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const width = rect.width;
            const percent = clickX / width;

            // check if the file was loaded
            if (audio.seekable.end(0) == 0) {
                alert("audio is still buffering. please try again later");

            }
            else {
                audio.currentTime = percent * audio.duration;
            }
        });

        // Volume control
        volumeBar.addEventListener('click', (e) => {
            const rect = volumeBar.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const width = rect.width;
            const percent = clickX / width;
            audio.volume = percent;
            volumeFill.style.width = percent * 100 + '%';
        });
    }

    // Format time in mm:ss
    function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
    }

    function changeMusicFile(event) {
        if (isFirstInit) {
            firstInit();
            isFirstInit = false;
        }

        // Get the clicked element (the song-card div)
        const songCard = event.currentTarget;

        // Find the song-title div within the clicked song-card
        const songTitle = songCard.querySelector('.song-title').textContent;
        document.querySelector('.playing-title').textContent = songTitle;

        const songArtist = songCard.querySelector('.song-artist').textContent;
        document.querySelector('.playing-artist').textContent = songArtist;

        const songArtistId = songCard.querySelector('.song-artist-id').textContent;
        // document.querySelector('.playing-artist-id').textContent = songArtistId;

        //https://localhost:7012/api/audio/{song-artist-id}/{song-file-name}
        const songFileName = songCard.querySelector('.song-file-name').textContent;
        //  document.querySelector('.playing-file-name').textContent = songFileName;

        const newSrc = "/api/audio/" + songArtistId + "/" + songFileName;
        //לא הוספתי localhost כדי שהלינק לא יהיה מקומי ויהיה אפשר להפעיל אותו מכל מחשב


        const audio = document.getElementById("audio-player");
        audio.src = newSrc; // set new source
        audio.preload = "auto"; //על מנת שהשיר יטען מהק יותר
        audio.load();
        playSong();
    }

    //ניגש לפקד של האאודיו ואומר לו לנגן ומשנה את האייקון של הניגון
    function playSong() {

        const audio = document.getElementById("audio-player");
        const playPauseButton = document.querySelector('.play-pause');
        const playPauseIcon = playPauseButton.querySelector('path');

        audio.play();
        playPauseIcon.setAttribute('d', 'M6 5h4v14H6zm8 0h4v14h-4z'); // Pause icon
    }
</script>

<!-- SVG Definitions -->
<svg style="display: none;">
    <defs>
        <linearGradient id="logo-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#ff3a2e" />
            <stop offset="100%" stop-color="#ffb62b" />
        </linearGradient>
    </defs>
</svg>

<!-- Sidebar -->
<aside class="sidebar">
    <div class="logo-container">
        <div class="logo">
            <div class="logo-icon">
                <svg viewBox="0 0 24 24" class="logo-flame">
                    <path d="M12 23C8.13 23 5 19.87 5 16c0-3.36 2.5-5 4-8 .73 1.73 1.7 3.4 2.5 5 .5-1.5 1.5-4 1.5-5 0-2.5 5-7.3 5-7.3s1 2 1 3.5c0 3-3 3.5-3 7.5 0 1 .5 2.3 1.5 3 1 .7 1.5 1.2 2 2.5.5 1.3.5 2.9-.5 4-1 1.1-1.5 1.7-3.8 1.7-.63-.01-2.33-.35-3.2-1"></path>
                </svg>
            </div>
            <div class="logo-text">TUNEAPP</div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-title">Menu</div>
        <a class="nav-item active">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z" class="svg-icon"></path>
            </svg>
            Home
        </a>
        <a class="nav-item" href="Explore">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" class="svg-icon"></path>
            </svg>
            Explore
        </a>
        <a class="nav-item">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z" class="svg-icon"></path>
            </svg>
            Playlists
        </a>
        <a class="nav-item">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M14 10H2v2h12v-2zm0-4H2v2h12V6zm4 8v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zM2 16h8v-2H2v2z" class="svg-icon"></path>
            </svg>
            Create Playlist
        </a>
        <a class="nav-item" href="UserSettings" >
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" class="svg-icon"></path>
            </svg>
            User Settings 
        </a>

        @if (IsArtist)
        {
            <a class="nav-item" href="ArtistManager">
                <svg class="nav-icon" viewBox="0 0 24 24">
                    <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" class="svg-icon"></path>
                </svg>
                Artist Manager
            </a>
        }


        <div class="nav-title">Library</div>
        <a class="nav-item">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z" class="svg-icon"></path>
            </svg>
            Artists
        </a>
        <a class="nav-item">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z" class="svg-icon"></path>
            </svg>
            Albums
        </a>
        <a class="nav-item" href="genres">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z" class="svg-icon"></path>
            </svg>
            Genres
        </a>
        <a class="nav-item">
            <svg class="nav-icon" viewBox="0 0 24 24">
                <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 5h-3v5.5c0 1.38-1.12 2.5-2.5 2.5S10 13.88 10 12.5s1.12-2.5 2.5-2.5c.57 0 1.08.19 1.5.51V5h4v2zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6z" class="svg-icon"></path>
            </svg>
            History
        </a>
    </nav>
    @if (listener != null)
    {
        <div class="user-profile">
            <div class="user-avatar">@listener.UserName[0].ToString().ToUpper()</div>
            <div class="user-info">

                @if (!IsArtist)
                {
                    <div class="user-name">@listener.UserName</div>
                    <div class="user-type">Listener</div>

                }
                else
                {
                    <div class="user-name">@artist.StageName</div>
                    <div class="user-type">Artist</div>
                }
            </div>
        </div>
    }
</aside>

<!-- Main Content -->
<div class="main-content">
    <!-- Header -->
    <header class="header">
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Search for songs, artists, albums...">
            <svg class="search-icon" viewBox="0 0 24 24" width="20" height="20">
                <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" class="svg-icon"></path>
            </svg>
        </div>

        <div class="header-actions">
            <div class="notification-bell">
                <svg viewBox="0 0 24 24" width="24" height="24">
                    <path d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z" class="svg-icon"></path>
                </svg>
                <div class="notification-count">3</div>
            </div>
        </div>
    </header>

    <!-- Content -->
    <div class="content">
        <!-- Hero Section -->
        <div class="hero-section">
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <div class="hero-subtitle">Featured Playlist</div>
                <h1 class="hero-title">Hot Hits: Summer Edition</h1>
                <p class="hero-description">The ultimate summer playlist with the hottest tracks from your favorite artists. Perfect for beach days and summer nights.</p>
                <button class="hero-button">
                    <span class="play-icon">▶</span>
                    Play Now
                </button>
            </div>

            <!-- Fire particles for hero -->
            <div class="fire-particle" style="bottom: 20px; left: 10%; animation-delay: 0s;"></div>
            <div class="fire-particle" style="bottom: 30px; left: 25%; animation-delay: 1s;"></div>
            <div class="fire-particle" style="bottom: 15px; left: 40%; animation-delay: 0.5s;"></div>
            <div class="fire-particle" style="bottom: 25px; left: 60%; animation-delay: 1.5s;"></div>
            <div class="fire-particle" style="bottom: 10px; left: 75%; animation-delay: 0.7s;"></div>
            <div class="fire-particle" style="bottom: 20px; left: 90%; animation-delay: 1.2s;"></div>
        </div>

        <!-- Recommended Based on Genres You Like -->
        <section class="section">
            <div class="section-header">
                <h2 class="section-title">
                    <svg class="section-icon" viewBox="0 0 24 24">
                        <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" class="svg-icon"></path>
                    </svg>
                    Recommended Based on Your Taste
                </h2>
                <a href="#" class="see-all">See All</a>
            </div>

            <div class="card-grid">
                @if (songsByGenre != null)
                {
                    foreach (var song in songsByGenre)
                    {
                        <div class="song-card" onclick="changeMusicFile(event)">
                            <div class="song-thumbnail">

                                @if (artistData.ContainsKey(song.ArtistID) && artistData[song.ArtistID].ProfileImage != null)
                                {
                                    <img class="artist-image" src="data:image/jpeg;base64,@System.Convert.ToBase64String(artistData[song.ArtistID].ProfileImage)" />
                                }
                                else
                                {
                                    <img src="/api/placeholder/300/300" alt="Song Cover">
                                }

                                 
                                @* <img src="/api/placeholder/300/300" alt="Song Cover"> *@
                                <div class="song-play">▶</div>
                            </div>
                            <div class="song-info">
                                <div class="song-title">@song.SongName</div>
                                <div class="song-artist">@sName[song.ArtistID]</div>
                                <div class="song-artist-id" style="display:none;">@song.ArtistID</div>
                                <div class="song-file-name" style="display:none;">@song.SongFilePath</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </section>

        <!-- New from Artists You Follow -->
        <section class="section">
            <div class="section-header">
                <h2 class="section-title">
                    <svg class="section-icon" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z" class="svg-icon"></path>
                    </svg>
                    New from Artists You Follow
                </h2>
                <a href="#" class="see-all">See All</a>
            </div>

            <div class="card-grid">
                @if (songsByFollowedArtists != null)
                {
                    foreach (var song in songsByFollowedArtists)
                    {
                        <div class="song-card" onclick="changeMusicFile(event)">
                            <div class="song-thumbnail">
                                @if (artistData.ContainsKey(song.ArtistID) && artistData[song.ArtistID].ProfileImage != null)
                                {
                                    <img class="artist-image" src="data:image/jpeg;base64,@System.Convert.ToBase64String(artistData[song.ArtistID].ProfileImage)" />
                                }
                                else
                                {
                                    <img src="/api/placeholder/300/300" alt="Song Cover">
                                }
                                <div class="song-play">▶</div>
                            </div>
                            <div class="song-info">
                                <div class="song-title">@song.SongName</div>
                                <div class="song-artist">@sName[song.ArtistID]</div>
                                <div class="song-artist-id" style="display:none;">@song.ArtistID</div>
                                <div class="song-file-name" style="display:none;">@song.SongFilePath</div>
                            </div>
                        </div>
                    }
                }
            </div>

        </section>

        <!-- Artists Shows -->
        <section class="section">
            <div class="section-header">
                <h2 class="section-title">
                    <svg class="section-icon" viewBox="0 0 24 24">
                        <path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z" class="svg-icon"></path>
                    </svg>
                    Artists Shows
                </h2>
                <a href="#" class="see-all">See All</a>
            </div>

            <div class="shows-container" role="region" aria-label="Artist shows carousel">
                <!-- Show Card 1 -->
                @if (lst != null)
                {
                    @foreach (Events e in lst)
                    {
                        <div class="show-card">
                            
                                <div class="show-image">
                                    @if (e.Image != null && e.Image.Length > 0)
                                    {
                                        <img src="data:image/jpeg;base64,@System.Convert.ToBase64String(e.Image)" alt="@e.ArtistName concert">
                                    }
                                    else
                                    {
                                        <img src="/api/placeholder/300/200" alt="@e.ArtistName concert">
                                    }
                                    <div class="show-date-overlay">@e.Date.ToString()</div>
                                </div>
                           
                            <div class="show-info">
                                <div class="show-artist-name">@e.ArtistName</div>
                                <div class="show-place">
                                    <svg class="location-icon" viewBox="0 0 24 24">
                                        <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z" />
                                    </svg>
                                    @e.Place
                                </div>
                                <button class="ticket-button" @onclick="()=> sendAPI(e.EventID)">Tickets</button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>loaading</p>
                }





            </div>
        </section>

        <!-- Messages from Artists -->
        <section class="section">
            <div class="section-header">
                <h2 class="section-title">
                    <svg class="section-icon" viewBox="0 0 24 24">
                        <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z" class="svg-icon"></path>
                    </svg>
                    Messages from Artists You Follow
                </h2>
                <a href="#" class="see-all">See All</a>
            </div>

            <div class="message-grid">
                <!-- Message 1 -->
                @if (lstFeed != null)
                {
                    @foreach (var message in lstFeed)
                    {
                        <div class="message-card">
                            <div class="message-header">
                                <div class="message-avatar">


                                    @if (artistData.ContainsKey(message.ArtistPosterID) && artistData[message.ArtistPosterID].ProfileImage != null)
                                    {
                                        <img class="artist-image" src="data:image/jpeg;base64,@System.Convert.ToBase64String(artistData[message.ArtistPosterID].ProfileImage)" />
                                    }
                                    else
                                    {
                                        <img src="/api/placeholder/100/100" alt="Song Cover">
                                    }

                                    
                                </div>
                                <div class="message-sender">
                                    <div class="sender-name">
                                        @mName[message.ArtistPosterID] 
                                        <svg class="verified-badge" viewBox="0 0 24 24">
                                            <path d="M23 12l-2.44-2.79.34-3.69-3.61-.82-1.89-3.2L12 2.96 8.6 1.5 6.71 4.69 3.1 5.5l.34 3.7L1 12l2.44 2.79-.34 3.7 3.61.82L8.6 22.5l3.4-1.47 3.4 1.46 1.89-3.19 3.61-.82-.34-3.69L23 12zm-12.91 4.72l-3.8-3.81 1.48-1.48 2.32 2.33 5.85-5.87 1.48 1.48-7.33 7.35z" fill="#1DA1F2"></path>
                                        </svg>
                                    </div>
                                    <div class="message-time">@message.PostDate</div>
                                </div>
                            </div>
                            <div class="message-title">
                                @message.Title
                            </div>
                            <div class="message-content">
                                @message.Message
                            </div>
                            <div class="message-actions">
                                <button class="message-button">Reply</button>
                                <button class="message-button primary">Listen Now</button>
                            </div>
                        </div>
                    }
                }
            </div>
        </section>
    </div>
    
    <!-- Now Playing Bar -->
    <div class="now-playing">
        <div class="playing-song-info">
            <div class="playing-thumbnail">
                <img src="/api/placeholder/50/50" alt="Now Playing">
            </div>
            <div class="playing-details">
                <div class="playing-title">-------</div>
                <div class="playing-artist">------</div>
            </div>
        </div>

        <div class="player-controls">
            <div class="control-buttons">
                <!--   <button class="control-button">
                    <svg viewBox="0 0 24 24" width="20" height="20">
                        <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z" class="svg-icon"></path>
                    </svg>
                </button> -->
                <button class="control-button play-pause">
                    <svg viewBox="0 0 24 24" width="18" height="18">
                        <path d="M8 5v14l11-7z" class="svg-icon"></path>
                    </svg>
                </button>
                <!--   <button class="control-button">
                    <svg viewBox="0 0 24 24" width="20" height="20">
                        <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z" class="svg-icon"></path>
                    </svg>
                   </button>-->
            </div>

            <div class="progress-container">
                <div class="time">--:--</div>
                <div class="progress-bar">
                    <div class="progress-fill"></div>
                    <div class="progress-handle"></div>
                </div>
                <div class="time">--:--</div>
            </div>
        </div>

        <div class="player-options">
            <div class="volume-container">
                <svg viewBox="0 0 24 24" width="20" height="20">
                    <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z" class="svg-icon"></path>
                </svg>
                <div class="volume-bar">
                    <div class="volume-fill"></div>
                </div>
            </div>
        </div>


        <audio id="audio-player" style="display:none;">
            <source src="" type="audio/mpeg">
        </audio>
    </div>
</div>

@code {
    // private Listener listener = new Listener();
    private List<Song> songs;
    private List<Song> songsByGenre;
    private List<Song> songsByFollowedArtists;
    Song s = new Song();
    private Dictionary<int, string> sName = new Dictionary<int, string>();
    private Dictionary<int, string> mName = new Dictionary<int, string>();
    private List<Feed> lstFeed = null;
    FeedDB feedDB = new FeedDB();

    SongDB songDB = new SongDB();
    ArtistDB artistDB = new ArtistDB();

    Fans fan = new Fans();

    //for pictures
    private Dictionary<int, Artist> artistData = new Dictionary<int, Artist>();


    private Song song = new Song();

    private string UserName;
    private string Password;

    private Listener listener;
    private Artist artist;
    private byte[] photo;
    private bool IsArtist = false;

    string ResultStr = " Loading... ";

    private List<Events> lst;

    public async Task GetArtist()
    {
        ArtistDB artistDB = new ArtistDB();
        artist = await artistDB.GetArtistBySongAsync(song.ArtistID);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var listener1 = await MySession.GetAsync<Listener>("ListenerLogin");
            var artist1 = await MySession.GetAsync<Artist>("ArtistLogin");
            if (listener1.Success && artist1.Success)
            {
                artist = artist1.Value;
                artist.UserName = listener1.Value.UserName;
                listener = listener1.Value;
                IsArtist = true;


                ///
                songs = await songDB.selectAllAsync();
                sName = new Dictionary<int, string>();
                mName = new Dictionary<int, string>();

                foreach (Song song in songs)
                {
                    Artist a = await artistDB.GetArtistByID(song.ArtistID);
                    if (!sName.ContainsKey(song.ArtistID))
                    {
                        sName.Add(song.ArtistID, a.StageName);
                        artistData.Add(song.ArtistID, a);
                    }
                }

                songsByGenre = await songDB.GetAllSongByGenreAsync(listener.UserID);
                songsByFollowedArtists = await songDB.GetAllSongsByFollowedArtists(listener.UserID);

                StateHasChanged();
            }
            else if (listener1.Success)
            {
                listener = listener1.Value;
                StateHasChanged();
            }
            else
                navigationManager.NavigateTo("Login");

        }

    }


    private async Task sendAPI(int idShow)
    {
        try
        {
            HttpClient httpClient = new HttpClient();
            fan.EventID = idShow;
            fan.UserName = listener.UserName;
            fan.Email = listener.EmailAddress;
            string url = "https://mc62mt86-7131.euw.devtunnels.ms/api/Shows";
            var aaa = await httpClient.PostAsJsonAsync(url, fan);

            if(aaa.IsSuccessStatusCode)
            {
                var s = await aaa.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            ResultStr = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = new HttpClient();
            string url = "https://mc62mt86-7131.euw.devtunnels.ms/api/Shows";
            lst = await httpClient.GetFromJsonAsync<List<Events>>(url);
        }
        catch (Exception ex)
        {
            ResultStr = ex.Message;
        }


        lstFeed = await feedDB.GetAllAsync();
        ArtistDB artistDB = new ArtistDB();
        foreach (var m in lstFeed)
        {
            Artist a = await artistDB.GetArtistByID(m.ArtistPosterID);
            if (!mName.ContainsKey(m.ArtistPosterID))
            {
                mName.Add(m.ArtistPosterID, a.StageName);
            }
        }



        /* var listener1 = await MySession.GetAsync<Listener>("ListenerLogin");
         if (listener1.Success)
         {
             artist.UserName = listener1.Value.UserName;
             listener = listener1.Value;
         }
         SongDB songDB = new SongDB();
         songs = await songDB.selectAllAsync();
         sName = new Dictionary<int, string>();
         ArtistDB artistDB = new ArtistDB();
         foreach (Song song in songs)
         {
             Artist a = await artistDB.GetArtistByID(song.ArtistID);
             if (!sName.ContainsKey(song.ArtistID))
             {
                 sName.Add(song.ArtistID, a.StageName);
             }
         }

         songsByGenre = await songDB.GetAllSongByGenreAsync(listener.UserID);
         songsByFollowedArtists = await songDB.GetAllSongsByFollowedArtists(listener.UserID);*/

    }
}
