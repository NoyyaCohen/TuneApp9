@page "/ArtistManager"
@using System.Collections
@using DBL
@using Models
@inject NavigationManager navigationManager
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage MySession
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment

<link href="/Prime.css" rel="stylesheet" />

<div class="app-container">
    <!-- Left Sidebar - Navigation Menu -->
    <div class="sidebar">
        <div class="logo-container">
            <div class="app-logo">TuneApp - Manager</div>
        </div>

        <nav class="main-nav">
            <ul>
                <li class="nav-item @(currentPage == "home" ? "active" : "")" @onclick='() => ChangePage("home")'>
                    <span class="nav-icon">🏠</span>
                    <span class="nav-text">Home</span>
                </li>
                <li class="nav-item @(currentPage == "upload" ? "active" : "")" @onclick='() => ChangePage("upload")'>
                    <span class="nav-icon">📂</span>
                    <span class="nav-text">File Upload</span>
                </li>
                <li class="nav-item @(currentPage == "settings" ? "active" : "")" @onclick='() => ChangePage("settings")'>
                    <span class="nav-icon">⚙️</span>
                    <span class="nav-text">User Settings</span>
                </li>
                <li class="nav-item @(currentPage == "tweetManager" ? "active" : "")" @onclick='() => ChangePage("tweetManager")'>
                    <span class="nav-icon">💬</span>
                    <span class="nav-text">Tweet</span>
                </li>
                <li class="nav-item" @onclick="Logout">
                    <span class="nav-icon">🚪</span>
                    <span class="nav-text">Logout</span>
                </li>
                
            </ul>
        </nav>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">

        <!-- Dynamic Content Based on Selected Page -->
        <div class="content-body">
            @if (currentPage == "home")
            {
                <div class="home-content">
                    <h1>Welcome to TuneApp</h1>
                    <p>Your music journey starts here.</p>
                    <!-- More home content here -->
                </div>
            }
            else if (currentPage == "upload")
            {
                <div class="upload-content">
                    <h1>Upload Files</h1>
                    <p>Share your music with the world.</p>

                    <div class="upload-form">
                        <div class="form-group">
                            <label>Select Files</label>
                            <InputFile OnChange="@OnInputFileChange" multiple class="form-input" />
                        </div>

                        <button @onclick="UploadFiles" class="submit-button">UPLOAD</button>

                        <p class="status-message">@uploadStatusMessage</p>

                        @if (uploadedFiles.Count > 0)
                        {
                            <div class="uploaded-files">
                                <h3>Uploaded Files:</h3>
                                <ul>
                                    @foreach (var file in uploadedFiles)
                                    {
                                        <li>@file</li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (currentPage == "settings") 
            {
                <div class="settings-content">
                    <h1>User Settings</h1>
                    <p>Manage your account preferences.</p>

                    <div class="settings-form">
                        <div class="form-group">
                            <label>Email</label>
                            <input @bind="userEmail" type="email" class="form-input" placeholder="Enter your email">
                        </div>

                        <div class="form-group">
                            <label>Current Password</label>
                            <input @bind="currentPassword" type="password" class="form-input" placeholder="Enter current password">
                        </div>

                        <div class="form-group">
                            <label>New Password</label>
                            <input @bind="newPassword" type="password" class="form-input" placeholder="Enter new password">
                        </div>

                        <div class="form-group">
                            <label>Confirm New Password</label>
                            <input @bind="confirmPassword" type="password" class="form-input" placeholder="Confirm new password">
                        </div>

                        <button @onclick="SaveSettings" class="submit-button">SAVE CHANGES</button>

                        <p class="status-message">@settingsStatusMessage</p>
                    </div>
                </div>
            }
            else if (currentPage == "tweetManager")
            {
                <div class="settings-content">
                    <h1>Your Tweets !</h1>
                    <p>Post a new tweet to your followers !</p>

                    <div>
                        <div class="form-group">
                            <label>Your Tweet:</label>
                            <input @bind="myNewTweetTitle" type="text" class="form-input" placeholder="The title" />
                            <textarea @bind="myNewTweet" class="form-input" placeholder="Your Tweet" rows="4" cols="50"></textarea>

                        </div>

                        <button @onclick="SaveTweet" class="submit-button">Submit Tweet</button>

                        <p class="status-message">@tweetStatusMessage</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // User state
    private Listener listener;
    private Artist artist;

    SongDB songdb = new SongDB();

    // Navigation state
    private string currentPage = "home";

    // File upload state
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<string> uploadedFiles = new List<string>();
    private string uploadStatusMessage = "";
    private long maxFileSize = 10 * 1024 * 1024; // 10MB

    // User settings state
    private string userEmail = "";
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private string myNewTweet = "";
    private string myNewTweetTitle = "";
    private string tweetStatusMessage = "";
    private string settingsStatusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await MySession.GetAsync<Listener>("ListenerLogin");
            listener = result.Value;

            if (listener == null)
            {
                navigationManager.NavigateTo("/Login");
                return;
            }

            var artistResult = await MySession.GetAsync<Artist>("ArtistLogin");
            artist = artistResult.Value;
            Console.WriteLine("artisit logged is:", artist);

            // Pre-fill user email if available
            userEmail = listener?.EmailAddress ?? "";
        }
        catch (Exception)
        {
            navigationManager.NavigateTo("/Login");
        }
    }

    private void ChangePage(string page)
    {
        currentPage = page;
        // Reset status messages when changing pages
        uploadStatusMessage = "";
        settingsStatusMessage = "";
    }

    private async Task Logout()
    {
        await MySession.DeleteAsync("ListenerLogin");
        await MySession.DeleteAsync("ArtistLogin");
        navigationManager.NavigateTo("/Login");
    }

    // File upload methods
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);
        }
        uploadStatusMessage = $"Selected {selectedFiles.Count} file(s)";
    }

    private async Task UploadFiles()
    {
        if (selectedFiles.Count == 0)
        {
            uploadStatusMessage = "Please select at least one file to upload.";
            return;
        }

        // save all the names of the files that did upload so i can delete them later if error
        // save all the names of the files that did upload so i can delete them later if error
        List<string> originalFiles = new List<string>();
        List<string> filePaths = new List<string>(); // Track full file paths for easier deletion
        List<string> fileNames = new List<string>(); // Track full file names for db
        bool uploadError = false;

        try
        {
            // Create the uploads directory if it doesn't exist
            string uploadsFolder = Path.Combine(Environment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }
            // Create user-specific folder
            string userFolder = Path.Combine(uploadsFolder, listener.UserID.ToString());
            if (!Directory.Exists(userFolder))
            {
                Directory.CreateDirectory(userFolder);
            }
            uploadedFiles.Clear();

            foreach (var file in selectedFiles)
            {
                if (file.Size > maxFileSize)
                {
                    uploadStatusMessage = $"File {file.Name} exceeds the maximum file size limit (10MB).";
                    uploadError = true;
                    break;
                }
                // Create a unique filename to prevent overwrites
                string uniqueFileName = Guid.NewGuid().ToString() + "_" + file.Name;
                string filePath = Path.Combine(userFolder, uniqueFileName);

                try
                {
                    // Open a file stream and copy the file data to it
                    using (var stream = new FileStream(filePath, FileMode.Create))
                    {
                        await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
                    }
                    originalFiles.Add(file.Name.Replace(".mp3", "").Trim());
                    filePaths.Add(filePath); // Track the full path
                    fileNames.Add(uniqueFileName);
                    uploadedFiles.Add(file.Name);
                }
                catch (Exception fileEx)
                {
                    // Error with this specific file
                    uploadStatusMessage = $"Error uploading {file.Name}: {fileEx.Message}";
                    uploadError = true;
                    break;
                }
            }

            if (uploadError || uploadedFiles.Count < selectedFiles.Count)
            {
                // Error occurred during upload or not all files were uploaded
                // Delete all files that were successfully uploaded
                DeleteUploadedFiles(filePaths);
                uploadStatusMessage = "Error occurred during upload. All uploaded files were removed.";
            }
            else if (uploadedFiles.Count == selectedFiles.Count)
            {
                uploadStatusMessage = $"Successfully uploaded {uploadedFiles.Count} file(s).";
                for (var i = 0; i < fileNames.Count; i++)
                {
                    string songName = originalFiles[i];
                    string songFilePath = fileNames[i];
                    var artistId = artist.ArtistID;

                    SongDB songdb = new SongDB();
                    Song s = new Song(songName, artistId, songFilePath);

                    Song song = await songdb.InsertGetObjAsync(s);
                }
            }
            else
            {
                // Not all files uploaded (maybe some were skipped due to size)
                DeleteUploadedFiles(filePaths);
                uploadStatusMessage = "Error: Not all files were uploaded. All partial uploads were removed.";
            }
        }
        catch (Exception ex)
        {
            // Delete any files that were uploaded before the exception
            DeleteUploadedFiles(filePaths);
            uploadStatusMessage = $"Error: {ex.Message}";
            await js.InvokeVoidAsync("console.error", ex.ToString());
        }
    }

    // Add this method to your @code block
    private void DeleteUploadedFiles(List<string> filePaths)
    {
        foreach (string path in filePaths)
        {
            try
            {
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            catch (Exception deleteEx)
            {
                // Log deletion errors but continue with other deletions
                Console.WriteLine($"Error deleting file {path}: {deleteEx.Message}");
            }
        }
        // Clear the tracking lists

        filePaths.Clear();
        uploadedFiles.Clear();
    }

    private async Task SaveTweet()
    {
        // Input validation
        if (string.IsNullOrWhiteSpace(myNewTweet))
        {
            tweetStatusMessage = "No text...";
            return;
        }
        
        if (myNewTweet.Length > 200)
        {
            tweetStatusMessage = "Dont make it too lonk, keep 200 chracters...";
            return;
        }




    }


    // User settings methods
    private async Task SaveSettings()
    {
        // Input validation
        if (string.IsNullOrWhiteSpace(userEmail))
        {
            settingsStatusMessage = "Email cannot be empty.";
            return;
        }

        if (!string.IsNullOrWhiteSpace(newPassword))
        {
            if (string.IsNullOrWhiteSpace(currentPassword))
            {
                settingsStatusMessage = "Current password is required to set a new password.";
                return;
            }

            if (newPassword != confirmPassword)
            {
                settingsStatusMessage = "New password and confirmation do not match.";
                return;
            }

            // Here you would typically verify the current password against the stored password
            // This is a dummy implementation
            if (currentPassword != "dummyPassword")
            {
                settingsStatusMessage = "Current password is incorrect.";
                return;
            }
        }

        try
        {
            // Update email (dummy implementation)
            if (listener != null && listener.EmailAddress != userEmail)
            {
                listener.EmailAddress = userEmail;
                // Here you would typically save the updated email to your database
                // For example: await listenerDB.UpdateListenerAsync(listener);
            }

            // Update password (dummy implementation)
            if (!string.IsNullOrWhiteSpace(newPassword))
            {
                // Here you would typically update the password in your database
                // For example: await listenerDB.UpdatePasswordAsync(listener.UserID, newPassword);

                // Clear password fields after successful update
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
            }

            settingsStatusMessage = "Settings updated successfully!";

            // Update session with new listener data
            await MySession.SetAsync("ListenerLogin", listener);
        }
        catch (Exception ex)
        {
            settingsStatusMessage = $"Error: {ex.Message}";
            await js.InvokeVoidAsync("console.error", ex.ToString());
        }
    }
}